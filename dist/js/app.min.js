/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nwindow.addEventListener('DOMContentLoaded', () => {\n  let dataBase = {};\n  let savePerValues = document.querySelector('.btn--persent'),\n    allPercentInput = document.querySelectorAll('.persent__input'),\n    allCheckRadio = document.querySelectorAll('.check__radio'),\n    calcBtn = document.querySelector('.calc-btn'),\n    errorMessage = document.querySelector('.error-message'),\n    scoreBtn = document.querySelector('.score__btn'),\n    scoreInput = document.querySelector('.score__input'),\n    actualScore = document.querySelector('.actual-score'),\n    basicMixerSize = document.querySelector('.select-mixer'),\n    basicMixerSizeValue = +document.querySelector('.select-mixer').value,\n    countComponent = 0;\n\n  basicMixerSize.addEventListener('change', (e) => {\n    basicMixerSizeValue = Number(e.target.value);\n  });\n\n  savePerValues.addEventListener('click', saveValues);\n\n  function saveValues() {\n    document.querySelectorAll('.result__title').forEach(e => {\n      e.classList.remove('show');\n    });\n    clearScore();\n\n    let checkSum = 0;\n\n    for (let item of allPercentInput) {\n\n      checkSum += +item.value;\n      let currentItemId = item.id,\n        currentItemData = item.getAttribute('data-check'),\n        currentIcon = document.getElementById(currentItemData);\n\n      if (checkSum > 100) {\n        item.value = '';\n        currentIcon.style.opacity = '0';\n        dataBase[currentItemId] = '0';\n        document.getElementById(`radio-${currentItemId}`).disabled = true;\n        alert('Suma wszystkich składników powinna być w zakresie od 0 do 100%');\n        break;\n      }\n\n      if (item.value <= 0) {\n        item.value = '';\n        currentIcon.style.opacity = '0';\n        dataBase[currentItemId] = '0';\n        document.getElementById(`radio-${currentItemId}`).disabled = true;\n\n      } else {\n\n        if (item.value) {\n          currentIcon.style.opacity = '1';\n          dataBase[currentItemId] = item.value;\n          document.getElementById(`radio-${currentItemId}`).disabled = false;\n        } else {\n          currentIcon.style.opacity = '0';\n          dataBase[currentItemId] = '0';\n          document.getElementById(`radio-${currentItemId}`).disabled = true;\n        }\n      }\n    }\n    showAmount(dataBase);\n  }\n\n\n  function showAmount(percent) {\n\n    for (let key in percent) {\n\n      let min = Math.ceil((270 * percent[key]) / 100);\n      let max = Math.ceil((450 * percent[key]) / 100);\n\n      if (key.length <= 5) {\n        percent[`min${key}`] = min;\n        percent[`max${key}`] = max;\n\n        document.getElementById(`min${key}`).innerHTML = min;\n        document.getElementById(`max${key}`).innerHTML = max;\n      }\n    }\n  }\n\n  scoreBtn.addEventListener('click', () => {\n    let min;\n\n    for (let item of allCheckRadio) {\n      if (item.checked === true) {\n        let currentCheck = item.getAttribute('data-value');\n        min = dataBase[`min${currentCheck}`];\n      }\n    }\n\n    if (scoreInput.value > 50000) {\n      clearScore();\n    }\n\n    else if (scoreInput.value < min) {\n      clearScore();\n      errorMessage.style.opacity = '1';\n    }\n\n\n    else {\n      countComponent = scoreInput.value;\n      actualScore.innerHTML = `${countComponent} kg`;\n      errorMessage.style.opacity = '0';\n    }\n\n    if (countComponent !== 0) {\n      calcBtn.disabled = false;\n    } else {\n      calcBtn.disabled = true;\n    }\n  });\n\n  calcBtn.addEventListener('click', calcAmount);\n\n  function calcAmount() {\n\n    for (let item of allCheckRadio) {\n\n      if (item.checked == true) {\n        let currentCheck = item.getAttribute('data-value'),\n          basicValue = (basicMixerSizeValue * dataBase[currentCheck] / 100),\n          min = dataBase[`min${currentCheck}`],\n          max = dataBase[`max${currentCheck}`],\n\n          basicPortions = Math.floor(countComponent / basicValue),\n          rest = countComponent - (basicPortions * basicValue);\n\n        calcAll(min, max, basicValue, basicPortions, rest);\n      }\n    }\n  }\n\n  function calcAll(min, max, basicValue, basicPortions, rest) {\n\n    let i = 1,\n      select = document.querySelector('.check-select'),\n      selectValue = select.value;\n\n    if (countComponent >= min && countComponent < max) {\n      let newPortions = Math.floor((countComponent * basicMixerSizeValue) / basicValue),\n        cans = Math.ceil(newPortions / selectValue);\n      showResult(i, 0, newPortions, i, 0, cans);\n    }\n\n\n    else if (countComponent >= max && (countComponent / 2) < min) {\n      rest = Math.floor(countComponent - max);\n      let newPortions = 450,\n        cans = Math.ceil(newPortions / selectValue);\n\n      showResult(1, 0, newPortions, 1, rest, cans);\n    }\n\n    else if (countComponent >= max && (countComponent / min) >= 2 && basicPortions < 2) {\n      let newRest = countComponent / 2,\n        newPortions = Math.ceil((newRest * basicMixerSizeValue) / basicValue),\n        cans = Math.ceil(newPortions / selectValue) * 2;\n\n      showResult(2, 0, newPortions, 2, 0, cans);\n    }\n\n    else {\n\n      if (rest < min) {\n\n        do {\n          if (rest >= min && rest / i >= min) {\n            break;\n          } else {\n            basicPortions -= 1;\n            rest += basicValue;\n            i++;\n          }\n\n        } while (i < 5);\n\n      }\n\n      let newRest = rest / i,\n        newPortions = Math.floor((newRest * basicMixerSizeValue) / basicValue),\n        basicResult = basicPortions + i;\n\n      let basicCansCaunt = Math.ceil((basicMixerSizeValue / selectValue) * basicPortions),\n        newCansCaunt = Math.ceil((newPortions / selectValue) * i),\n        allCans = basicCansCaunt + newCansCaunt;\n\n      showResult(basicResult, basicPortions, newPortions, i, 0, allCans);\n    }\n  }\n\n  function showResult(basicResult, basicPortions, portionsValue, portionsCount, restCount, cans) {\n\n    document.querySelector('.basic-portions__label').innerHTML = `${basicMixerSizeValue} kg`;\n    document.querySelector('.basic-result').innerHTML = `${basicResult} szt.`;\n    document.querySelector('.basic-portions').innerHTML = `${basicPortions} szt.`;\n    document.querySelector('.portions-value').innerHTML = `${portionsValue} kg`;\n    document.querySelector('.portions-count').innerHTML = `${portionsCount} szt.`;\n    document.querySelector('.rest__count').innerHTML = `${restCount} kg`;\n    document.querySelector('.cans__value').innerHTML = `${cans} szt.`;\n\n    document.querySelectorAll('.result__title').forEach(e => {\n      e.classList.add('show');\n    });\n\n    document.querySelector('.result__items').classList.add('result__items--show');\n\n    if (basicPortions === 0) {\n      document.querySelector('.optionally').classList.remove('show');\n    }\n    if (restCount === 0) {\n      document.querySelector('.rest').classList.remove('show');\n    }\n  }\n\n\n  allCheckRadio.forEach(item => {\n    item.addEventListener('change', (event) => {\n      document.querySelector('.score').classList.add('show');\n      let currentRadio = event.currentTarget.id;\n      clearRadio(currentRadio);\n      clearScore();\n    });\n  });\n\n  function clearRadio(item) {\n    allCheckRadio.forEach(e => {\n      e.checked = false;\n    });\n    document.getElementById(item).checked = true;\n  }\n\n  function clearScore() {\n    actualScore.innerHTML = '0';\n    document.querySelectorAll('.result__title').forEach(e => {\n      e.classList.remove('show');\n    });\n    document.querySelector('.result__items').classList.remove('result__items--show');\n    calcBtn.disabled = true;\n    scoreInput.value = '';\n    countComponent = 0;\n\n  }\n\n  document.querySelector('.btn--clear').addEventListener('click', () => {\n    window.location.reload();\n  });\n});\n\n//# sourceURL=webpack://calc_v1/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;